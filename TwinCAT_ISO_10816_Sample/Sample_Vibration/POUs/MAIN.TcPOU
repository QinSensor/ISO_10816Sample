<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="MAIN" Id="{6bc302c9-1de9-4c38-8ae6-ccf145f1f62e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT
    cInitSource			: ST_MA_MultiArray_InitPars 
							:= ( eTypeCode := eMA_TypeCode_LREAL, nDims := 2, aDimSizes := [cChannels, cBufferLength]);
	
END_VAR

VAR
	(* Input *)	
	nInputSelection			: UDINT := 1;						// Switch between hardware and function generator	
	nSample					: UDINT;
	// Hardware
	aEl3632Ch1 AT %I*		: ARRAY[1..cOversamples] OF INT;	// Input from hardware e.g. EL3632 ch1
	aEl3632Ch2 AT %I*		: ARRAY[1..cOversamples] OF INT;	// Input from hardware e.g. EL3632 ch2
	// Function generator
	fbFunctionGenerator1	: FB_FunctionGenerator;		// Signal Generator, ch1
	fSetFrequency1			: LREAL := 400;		        // Hz
	fSetAmplitude1			: LREAL := 4;		        // peak amplitude of sin signal [m/s^2]
	fbFunctionGenerator2	: FB_FunctionGenerator;		// Signal Generator, ch2
	fSetFrequency2			: LREAL := 35;		        // Hz
	fSetAmplitude2			: LREAL := 4;		        // peak amplitude of sin signal	[m/s^2]	
		
	
	(* Input from aBuffer to fbSource *)
	aBuffer				: ARRAY[1..cChannels] OF ARRAY[1..cOversamples] OF LREAL;						
	fbSource			: FB_CMA_Source :=(	stInitPars := cInitSource, 
											nOwnID := eID_Source, 
											aDestIDs := [eID_IntRMS]);		// Initialize source buffers
										
	(* From fbSink to aRMSResult *)	
	aRMSResult   		: ARRAY[1..cChannels] OF ARRAY[1..cResult_Length] OF LREAL;	// Copy result									
	fbSink				: FB_CMA_Sink := (nOwnID := eID_Sink);

	
	(* Classify calculated RMS values *)
	nCountResults		  : ULINT;	
	bCalculate			  : BOOL;
	nChannel              : UDINT;
	ISOClassIs_Vel        : ARRAY[1..cChannels] OF E_IsoClass;
	ISOClassIs_Displ      : ARRAY[1..cChannels] OF E_IsoClass;	
	
	(* error monitoring *)
	fbErrHist			: FB_HRErrHist; 

	(* little helper variables *)
	Ch1VelRMS : LREAL;
	Ch1DisplRMS : LREAL;
	Ch2VelRMS : LREAL;
	Ch2DisplRMS : LREAL;	
	
	(* output *)
	ISO_10816_Classification AT%Q* : E_IsoClass;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Input *)
CASE nInputSelection OF  // switch between 2 data sources --Qin
	0:  (* input from EL3632 *)    // analog input module
		FOR nSample := 1 TO cOversamples DO
			aBuffer[1][nSample] := cScale*INT_TO_LREAL(aEl3632Ch1[nSample]); // convert from Volts to acceleration in m/s^2
			aBuffer[2][nSample] := cScale*INT_TO_LREAL(aEl3632Ch2[nSample]);
		END_FOR 
	1:  (* signal generator *)		// create aritifical sine signal
		fbFunctionGenerator1(	fFrequency 	:= fSetFrequency1,
								fAmplitude 	:= fSetAmplitude1,
								eFunction 	:= E_FunctionType.Sine,
								aSignal		:= aBuffer[1] );	
		fbFunctionGenerator2(	fFrequency 	:= fSetFrequency2,
								fAmplitude 	:= fSetAmplitude2,
								eFunction 	:= E_FunctionType.Sine,
								aSignal		:= aBuffer[2] );	
END_CASE					

(* Call source to collect data *)
fbSource.Input2D( pDataIn 			:= ADR(aBuffer),   // ADR() gets the memory address (pointer). Qin
				  nDataInSize 		:= SIZEOF(aBuffer), 
				  eElementType 		:= eMA_TypeCode_LREAL,
				  nWorkDim0			:= 0,
				  nWorkDim1			:= 1,
				  pStartIndex		:= 0,
				  nOptionPars		:= cCMA_Option_MarkInterruption ); 
				  
IF fbSource.bError THEN
	fbErrHist.AddError(bErr:=TRUE, hrErrCode:=fbSource.hrErrorCode, sErrSource:='MAIN.fbSource'); // error monitoring
	// ToDo: if error
END_IF
(*fbSource is part of TwinCAT's Condition Monitoring & Analytics (CMA) library. It:
Acts as a data input interface for the analytics pipeline
Buffers and manages data flow into processing algorithms
Handles data format conversion and validation
Coordinates with other analytics blocks (like filters, FFT, RMS calculators)*)

(* Push results to sink *)
fbSink.Output2D(	pDataOut 		:= ADR(aRMSResult), 
					nDataOutSize 	:= SIZEOF(aRMSResult), 
					eElementType 	:= eMA_TypeCode_LREAL, 
					nWorkDim0 		:= 0,
					nWorkDim1 		:= 1,
					nElementsDim0	:= 0,
					nElementsDim1	:= 0,
					pStartIndex 	:= 0,
					nOptionPars		:= 0,
					bNewResult		=> bCalculate );
IF fbSink.bError THEN
	fbErrHist.AddError(bErr:=TRUE, hrErrCode:=fbSink.hrErrorCode, sErrSource:='MAIN.fbSink'); // error monitoring
	// ToDo: if error
END_IF

// define class according to ISO 10816-3 based on velocity and displacement data for each measurement channel
IF bCalculate THEN   // Only proceed if fbSink.Output2D(...) has new data. --Qin 
// bCalculate is set to TRUE when fresh results were written into aRMSResult.
	Ch1VelRMS := aRMSResult[1][2];
	Ch1DisplRMS := aRMSResult[1][3];
	Ch2VelRMS := aRMSResult[2][2];
	Ch2DisplRMS := aRMSResult[2][3];	
	
	IF NOT lrealisnan(Ch1VelRMS) THEN 

		nCountResults := fbSink.nCntResults;
		
		// do for each channel
		FOR nChannel := 1 TO cChannels DO
			
			// evaluate velocity data
			ISOClassIs_Vel[nChannel] := E_IsoClass.A;
			IF aRMSResult[nChannel][2] > cISOClassDef_Velocity[3] THEN
				ISOClassIs_Vel[nChannel] := E_IsoClass.D;
			ELSIF aRMSResult[nChannel][2] > cISOClassDef_Velocity[2] THEN
				ISOClassIs_Vel[nChannel] := E_IsoClass.C;
			ELSIF aRMSResult[nChannel][2] > cISOClassDef_Velocity[1] THEN
				ISOClassIs_Vel[nChannel] := E_IsoClass.B;
			END_IF;  
			
			// evaluate displacement data
			ISOClassIs_Displ[nChannel] := E_IsoClass.A;
			IF aRMSResult[nChannel][3] > cISOClassDef_Displ[3] THEN
				ISOClassIs_Displ[nChannel] := E_IsoClass.D;
			ELSIF aRMSResult[nChannel][3] > cISOClassDef_Displ[2] THEN
				ISOClassIs_Displ[nChannel] := E_IsoClass.C;
			ELSIF aRMSResult[nChannel][3] > cISOClassDef_Displ[1] THEN
				ISOClassIs_Displ[nChannel] := E_IsoClass.B;
			END_IF;	
									
		END_FOR;
		
		// according to ISO 10816-3 select worst case 		
		ISO_10816_Classification := E_IsoClass.A;
		FOR  nChannel := 1 TO cChannels DO 
			IF ISOClassIs_Vel[nChannel] >  ISO_10816_Classification THEN
				ISO_10816_Classification := ISOClassIs_Vel[nChannel];
			END_IF
			IF ISOClassIs_Displ[nChannel] >  ISO_10816_Classification THEN
				ISO_10816_Classification := ISOClassIs_Displ[nChannel];
			END_IF
		END_FOR;
	ELSE
		// result is NaN... code here what to do. 
		
	END_IF;
	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3" Count="16" />
      <LineId Id="21" Count="8" />
      <LineId Id="222" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="231" Count="3" />
      <LineId Id="230" Count="0" />
      <LineId Id="35" Count="15" />
      <LineId Id="52" Count="2" />
      <LineId Id="235" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="143" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="58" Count="24" />
      <LineId Id="152" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="165" Count="2" />
      <LineId Id="146" Count="0" />
      <LineId Id="149" Count="2" />
      <LineId Id="147" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>